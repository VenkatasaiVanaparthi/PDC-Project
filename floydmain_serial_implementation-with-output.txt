/*Serial Implementation of the Algorithm and for the final review we will implement using parallel programming and compare the both*/
/*c++ program for floyd warshall algorithm */
#include <iostream>
#include <conio.h>
using namespace std;
// Solves the all-pairs shortest path problem using Floyd Warshall algorithm
void floyds(int dist[][4])
{
/* b[][] will be the output matrix that will finally have the shortest 
      distances between every pair of vertices */
    int b[4][4],i, j, k;
/* Initialize the solution matrix same as input graph matrix. Or 
       we can say the initial values of shortest distances are based
       on shortest paths considering no intermediate vertex. */
    for (i = 0; i < 4; i++)
        for (j = 0; j < 4; j++)
            b[i][j] = dist[i][j];
/* Add all vertices one by one to the set of intermediate vertices.
      ---> Before start of a iteration, we have shortest distances between all
      pairs of vertices such that the shortest distances consider only the
      vertices in set {0, 1, 2, .. k-1} as intermediate vertices.
      ----> After the end of a iteration, vertex no. k is added to the set of
      intermediate vertices and the set becomes {0, 1, 2, .. k} */
    for (k = 0; k < 4; k++)
    {
// Pick all vertices as source one by one
        for (i = 0; i < 4; i++)
        {
// Pick all vertices as destination for the above picked source
            for (j = 0; j < 4; j++)
            {
// If vertex k is on the shortest path from
// i to j, then update the value of b[i][j]
                if ((b[i][k] * b[k][j] != 0) && (i != j))
                {
                    if ((b[i][k] + b[k][j] < b[i][j]) || (b[i][j] == 0))
                    {
                        b[i][j] = b[i][k] + b[k][j];
                    }
                }
            }
        }
    }
//print the shortest distance matrix
    for (i = 0; i < 4; i++)
    {
        cout<<"\nMinimum Cost With Respect to Node:"<<i<<endl;
        for (j = 0; j < 4; j++)
        {
            cout<<b[i][j]<<"\t";
        }
 
    }
}
//driver program to test the above code
int main()
{
    int b[4][4];
    cout<<"ENTER VALUES OF ADJACENCY MATRIX\n\n";
    for (int i = 0; i < 4; i++)
    {
        cout<<"enter values for "<<(i+1)<<" row"<<endl;
        for (int j = 0; j < 4; j++)
        {
            cin>>b[i][j];
        }
    }
//prints the solution
    floyds(b);
    getch();
}

output:
//ENTER VALUES OF ADJACENCY MATRIX

enter values for 1 row
1
2
3
4
enter values for 2 row
4
3
5
6
enter values for 3 row
7
9
4
7
enter values for 4 row
4
7
2
5

Minimum Cost With Respect to Node:0
1       2       3       4
Minimum Cost With Respect to Node:1
4       3       5       6
Minimum Cost With Respect to Node:2
7       9       4       7
Minimum Cost With Respect to Node:3
4       6       2       5

